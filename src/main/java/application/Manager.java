package application;

import java.io.Serializable;

import javax.persistence.*;

import org.hibernate.Session;

/**
 * Manager class/Entity used to create Manager objects
 * @author Maciej Becmer
 *
 */
@Entity
@Table (name = "Manager")
public class Manager implements Serializable{

	private static final long serialVersionUID = 1L;
	/**
	 * Autogenerated id of the Manager
	 * @author Maciej Becmer
	 */
	@Id
	@Column (name = "ID", unique = true, length = 5)
	private int id;
	
	/**
	 * Name of the Manager
	 * @author Maciej Becmer
	 */
	@Column
	@Embedded
	private Name name;
	/**
	 * Phone number of the Manager
	 * @author Maciej Becmer
	 */
	@Column (name = "phone")
	private String phone;
	/**
	 * Email of the Manager
	 * @author Maciej Becmer
	 */
	@Column (name = "email")
	private String email;
	/**
	 * Date of birth of the Manager
	 * @author Maciej Becmer
	 */
	@Column (name = "DOB")
	private String DOB;
	/**
	 * Rating of the manager 1-10.
	 * @author Maciej Becmer
	 */
	@Column (name = "rating")
	private int rating;
	/**
	 * teamID of the manager, assigns him to a team
	 * @author Maciej Becmer
	 */
	@Column(name= "teamID")
	private int teamID;
	
	
	/**
	 * Default constructor
	 * @author Maciej Becmer
	 */
	public Manager() {
		this(new Name(), "phone","email","DOB",0,-1);
		
	}
	
	/**
	 * class constructor
	 * @author Maciej Becmer
	 */
	public Manager(Name name, String phone, String email, String dOB, int rating, int teamID) {
		this.name = name;
		this.phone = phone;
		this.email = email;
		DOB = dOB;
		this.rating = rating;
		this.teamID = teamID;
	}

	/**
	 * Saves manager to the database
	 * @author Maciej Becmer
	 */
	public boolean persist() {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu");
    	EntityManager em = emf.createEntityManager();
    	try {
	    	em.getTransaction().begin();
	    	em.persist(this);
	    	em.getTransaction().commit();
    	}
		catch (Error error) {
			return false;
		}
		return true;

	}
	
	/**
	 * Transfers the manager from a team to another
	 * @author Maciej Becmer
	 */
	public boolean transferManager (int teamID) {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu");
		EntityManager em = emf.createEntityManager();
		try {
			Session session = em.unwrap(Session.class);
			em.getTransaction().begin();
			this.setTeamID(teamID);
			session.saveOrUpdate(this);
			em.getTransaction().commit();
		}
		catch (Error error) {
			return false;
		}
		return true;

	}


	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public Name getName() {
		return name;
	}

	public void setName(Name name) {
		this.name = name;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getDOB() {
		return DOB;
	}

	public void setDOB(String dOB) {
		DOB = dOB;
	}

	public int getRating() {
		return rating;
	}

	public void setRating(int rating) {
		this.rating = rating;
	}

	public int getTeamID() {
		return teamID;
	}
	
	public void setTeamID(int teamID) {
		this.teamID = teamID;
	}
	

	@Override
	public String toString() {
		return "Manager [id=" + id + ", name=" + name + ", phone=" + phone + ", email=" + email + ", DOB=" + DOB
				+ ", rating=" + rating + ", team=" + "]";
	}



}


